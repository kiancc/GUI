{"ast":null,"code":"var _jsxFileName = \"/Users/kchong/Documents/Uni/year2/Term 2/GUI/GUI-labs/Resources/minesweeper/src/components/minefield/Board.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport Square from './Square';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board({\n  isActive,\n  setIsActive,\n  flag,\n  setFlag\n}) {\n  _s();\n  // initialises board\n  const [squares, setSquares] = useState(Array(64).fill(null));\n  useEffect(() => {\n    // initialises the board when the component mounts\n    let board = Array(8).fill(null).map(() => Array(8).fill(null));\n\n    // adds random mines\n    const num_mines = 10;\n    for (let i = 0; i < num_mines; i++) {\n      let m = Math.floor(Math.random() * 8);\n      let n = Math.floor(Math.random() * 8);\n      while (board[m][n] != null) {\n        m = Math.floor(Math.random() * 8);\n        n = Math.floor(Math.random() * 8);\n      }\n      board[m][n] = 'X';\n    }\n\n    // populates num adj mines in squares\n    for (let i = 0; i < 8; i++) {\n      for (let j = 0; j < 8; j++) {\n        let num_mines = 0;\n        if (board[i][j] !== 'X') {\n          const adj_pos = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];\n          for (let n = 0; n < adj_pos.length; n++) {\n            const idx = adj_pos[n][0] + i;\n            const jdx = adj_pos[n][1] + j;\n            if (0 <= idx && idx < 8 && 0 <= jdx && jdx < 8) {\n              if (board[idx][jdx] === 'X') {\n                num_mines++;\n              }\n            }\n          }\n          board[i][j] = num_mines;\n        }\n      }\n    }\n\n    // Set the generated board in state (this can later be passed to squares)\n    setSquares(board);\n  }, []);\n  const handleClick = i => {\n    if (!isActive) {\n      setIsActive(true);\n    }\n    let nextSquares = [...squares];\n    let r = Math.floor(i / 8);\n    let c = i % 8;\n\n    // Add your logic for handling clicks on squares (e.g., dfs, reveal squares)\n\n    setSquares(nextSquares);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: squares.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: row.map((square, colIndex) => {\n        const index = rowIndex * 8 + colIndex;\n        return /*#__PURE__*/_jsxDEV(Square, {\n          value: square,\n          onSquareClicked: () => handleClick(index)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 15\n        }, this);\n      })\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(Board, \"ewpI2RYuG8/N/y2TJDbDYZm74Ik=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["useState","useEffect","Square","jsxDEV","_jsxDEV","Board","isActive","setIsActive","flag","setFlag","_s","squares","setSquares","Array","fill","board","map","num_mines","i","m","Math","floor","random","n","j","adj_pos","length","idx","jdx","handleClick","nextSquares","r","c","className","children","row","rowIndex","square","colIndex","index","value","onSquareClicked","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kchong/Documents/Uni/year2/Term 2/GUI/GUI-labs/Resources/minesweeper/src/components/minefield/Board.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport Square from './Square';\n\nfunction Board({ isActive, setIsActive, flag, setFlag }) {\n  // initialises board\n  const [squares, setSquares] = useState(Array(64).fill(null));\n  \n  useEffect(() => {\n    // initialises the board when the component mounts\n    let board = Array(8).fill(null).map(() => Array(8).fill(null));\n\n    // adds random mines\n    const num_mines = 10;\n    for (let i = 0; i < num_mines; i++) {\n      let m = Math.floor(Math.random() * 8);\n      let n = Math.floor(Math.random() * 8);\n      while (board[m][n] != null) {\n        m = Math.floor(Math.random() * 8);\n        n = Math.floor(Math.random() * 8);\n      }\n      board[m][n] = 'X';\n    }\n\n    // populates num adj mines in squares\n    for (let i = 0; i < 8; i++) {\n      for (let j = 0; j < 8; j++) {\n        let num_mines = 0;\n        if (board[i][j] !== 'X') {\n          const adj_pos = [\n            [-1, -1], [-1, 0], [-1, 1],\n            [0, -1], [0, 1], [1, -1],\n            [1, 0], [1, 1]\n          ];\n          for (let n = 0; n < adj_pos.length; n++) {\n            const idx = adj_pos[n][0] + i;\n            const jdx = adj_pos[n][1] + j;\n            if (0 <= idx && idx < 8 && 0 <= jdx && jdx < 8) {\n              if (board[idx][jdx] === 'X') {\n                num_mines++;\n              }\n            }\n          }\n          board[i][j] = num_mines;\n        }\n      }\n    }\n\n    // Set the generated board in state (this can later be passed to squares)\n    setSquares(board);\n  }, []);\n\n  const handleClick = (i) => {\n    if (!isActive) {\n      setIsActive(true);\n    }\n    let nextSquares = [...squares];\n    let r = Math.floor(i / 8);\n    let c = i % 8;\n\n    // Add your logic for handling clicks on squares (e.g., dfs, reveal squares)\n\n    setSquares(nextSquares);\n  };\n\n  return (\n    <div className=\"board\">\n      {squares.map((row, rowIndex) => (\n        <div key={rowIndex} className=\"board-row\">\n          {row.map((square, colIndex) => {\n            const index = rowIndex * 8 + colIndex;\n            return (\n              <Square\n                key={index}\n                value={square}\n                onSquareClicked={() => handleClick(index)}\n              />\n            );\n          })}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}