{"ast":null,"code":"export const generateBoard = () => {\n  // initialises board\n  // -----------------\n  let board = Array();\n  for (let i = 0; i < 8; i++) {\n    const row = Array();\n    for (let j = 0; j < 8; j++) {\n      row.push(null);\n    }\n    board.push(row);\n  }\n  // console.log(board);\n  // -----------------\n\n  // adds random mines\n  // -----------------\n  const num_mines = 10;\n  for (let i = 0; i < num_mines; i++) {\n    let m = Math.floor(Math.random() * 8);\n    let n = Math.floor(Math.random() * 8);\n    while (board[m][n] != null) {\n      m = Math.floor(Math.random() * 8);\n      n = Math.floor(Math.random() * 8);\n    }\n    board[m][n] = \"X\";\n  }\n  console.log(board);\n  // -----------------\n\n  // populates num adj mines in squares\n  // -----------------\n  for (let i = 0; i < 8; i++) {\n    for (let j = 0; j < 8; j++) {\n      let num_mines = 0;\n      if (board[i][j] != \"X\") {\n        const adj_pos = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];\n        for (let n = 0; n < adj_pos.length; n++) {\n          const idx = adj_pos[n][0] + i;\n          const jdx = adj_pos[n][1] + j;\n          // if the surrounding indicies are in bounds count number of mines;\n          if (0 <= idx && idx < 8 && 0 <= jdx && jdx < 8) {\n            if (board[idx][jdx] === \"X\") {\n              num_mines++;\n            }\n          }\n        }\n        board[i][j] = num_mines;\n      }\n    }\n  }\n  // console.log(board);\n  // -----------------\n  return board;\n};","map":{"version":3,"names":["generateBoard","board","Array","i","row","j","push","num_mines","m","Math","floor","random","n","console","log","adj_pos","length","idx","jdx"],"sources":["/Users/kchong/Documents/Uni/year2/Term 2/GUI/GUI-labs/Resources/minesweeper/src/components/minefield/boardUtils.js"],"sourcesContent":["export const generateBoard = () => {\n    // initialises board\n    // -----------------\n    let board = Array();\n\n    for (let i = 0; i < 8; i++) {\n        const row = Array();\n        for (let j = 0; j < 8; j++) {\n            row.push(null);\n        }\n        board.push(row);\n    }\n    // console.log(board);\n    // -----------------\n\n    // adds random mines\n    // -----------------\n    const num_mines = 10;\n    for (let i = 0; i < num_mines; i++) {\n        let m = Math.floor(Math.random() * 8);\n        let n = Math.floor(Math.random() * 8);\n        while (board[m][n] != null) {\n        m = Math.floor(Math.random() * 8);\n        n = Math.floor(Math.random() * 8);\n        }\n        board[m][n] = \"X\";\n    }\n    console.log(board);\n    // -----------------\n\n    // populates num adj mines in squares\n    // -----------------\n    for (let i = 0; i < 8; i++) {\n    for (let j = 0; j < 8; j++) {\n        let num_mines = 0;\n        if (board[i][j] != \"X\") {\n        const adj_pos = [[-1,-1], [-1,0], [-1,1], [0,-1], [0,1], [1,-1], [1,0], [1,1]];\n        for (let n = 0; n < adj_pos.length; n++) {\n            const idx = adj_pos[n][0] + i;\n            const jdx = adj_pos[n][1] + j;\n            // if the surrounding indicies are in bounds count number of mines;\n            if ((0 <= idx && idx < 8) && (0 <= jdx && jdx < 8)) {\n            if (board[idx][jdx] === \"X\") {\n                num_mines++;\n            }\n            \n            }\n        }\n        board[i][j] = num_mines;\n        }\n    }\n    }\n    // console.log(board);\n    // -----------------\n    return board;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}