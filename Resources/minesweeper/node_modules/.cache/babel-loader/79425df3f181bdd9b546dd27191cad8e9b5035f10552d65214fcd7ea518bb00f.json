{"ast":null,"code":"var _jsxFileName = \"/Users/kchong/Documents/Uni/year2/Term 2/GUI/GUI-labs/Resources/minesweeper/src/components/minefield/Board.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport Square from './Square';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Board({\n  isActive,\n  setIsActive,\n  flag,\n  setFlag,\n  board,\n  setBoard\n}) {\n  _s();\n  // Initialize squares state based on the board prop\n  const [squares, setSquares] = useState(() => {\n    return Array(64).fill(null); // Initialize as a 64-length array with null values\n  });\n\n  // Effect hook to sync squares with board prop when board updates\n  useEffect(() => {\n    const flatBoard = board.flat(); // Flatten the 2D array to match squares\n    setSquares(flatBoard);\n  }, [board]); // Dependency on the board prop\n\n  function handleClick(i) {\n    if (!isActive) {\n      setIsActive(true);\n    }\n    let nextSquares = squares.slice();\n    let r = Math.floor(i / 8);\n    let c = i % 8;\n    if (board[r][c] === \"0\") {\n      // do a dfs and clear adjacent zeros\n      nextSquares[i] = board[r][c];\n      let stack = [[r, c]];\n      let visited = new Set();\n      visited.add(i);\n      while (stack.length > 0) {\n        let pos = stack.pop();\n        const adj_pos = [[-1, 0], [0, -1], [1, 0], [0, 1]];\n        for (let n = 0; n < adj_pos.length; n++) {\n          const idx = pos[0] + adj_pos[n][0];\n          const jdx = pos[1] + adj_pos[n][1];\n          if (0 <= idx && idx < 8 && 0 <= jdx && jdx < 8) {\n            if (board[idx][jdx] === \"0\" && !visited.has(idx * 8 + jdx)) {\n              nextSquares[idx * 8 + jdx] = board[idx][jdx];\n              stack.push([idx, jdx]);\n              visited.add(idx * 8 + jdx);\n            }\n          }\n        }\n      }\n    } else if (board[r][c] !== \"X\") {\n      // if the square isn't a mine, show surrounding tiles\n      nextSquares[i] = board[r][c];\n    } else {\n      nextSquares[i] = \"X\";\n    }\n    setSquares(nextSquares);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: Array.from({\n      length: 8\n    }).map((_, rowIdx) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: Array.from({\n        length: 8\n      }).map((_, colIdx) => {\n        const idx = rowIdx * 8 + colIdx;\n        return /*#__PURE__*/_jsxDEV(Square, {\n          value: squares[idx],\n          onSquareClicked: () => handleClick(idx)\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 15\n        }, this);\n      })\n    }, rowIdx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this))\n  }, void 0, false);\n}\n_s(Board, \"9xsdxYsM3fXmr+Oi8jPWwxZiH/0=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["useState","useEffect","Square","jsxDEV","_jsxDEV","Fragment","_Fragment","Board","isActive","setIsActive","flag","setFlag","board","setBoard","_s","squares","setSquares","Array","fill","flatBoard","flat","handleClick","i","nextSquares","slice","r","Math","floor","c","stack","visited","Set","add","length","pos","pop","adj_pos","n","idx","jdx","has","push","children","from","map","_","rowIdx","className","colIdx","value","onSquareClicked","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kchong/Documents/Uni/year2/Term 2/GUI/GUI-labs/Resources/minesweeper/src/components/minefield/Board.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport Square from './Square';\n\nfunction Board({ isActive, setIsActive, flag, setFlag, board, setBoard }) {\n  // Initialize squares state based on the board prop\n  const [squares, setSquares] = useState(() => {\n    return Array(64).fill(null); // Initialize as a 64-length array with null values\n  });\n\n  // Effect hook to sync squares with board prop when board updates\n  useEffect(() => {\n    const flatBoard = board.flat();  // Flatten the 2D array to match squares\n    setSquares(flatBoard);\n  }, [board]);  // Dependency on the board prop\n\n  function handleClick(i) {\n    if (!isActive) {\n      setIsActive(true);\n    }\n    let nextSquares = squares.slice();\n    let r = Math.floor(i / 8);\n    let c = i % 8;\n\n    if (board[r][c] === \"0\") {\n      // do a dfs and clear adjacent zeros\n      nextSquares[i] = board[r][c];\n      let stack = [[r, c]];\n      let visited = new Set();\n      visited.add(i);\n\n      while (stack.length > 0) {\n        let pos = stack.pop();\n        const adj_pos = [[-1, 0], [0, -1], [1, 0], [0, 1]];\n        for (let n = 0; n < adj_pos.length; n++) {\n          const idx = pos[0] + adj_pos[n][0];\n          const jdx = pos[1] + adj_pos[n][1];\n          if (0 <= idx && idx < 8 && 0 <= jdx && jdx < 8) {\n            if (board[idx][jdx] === \"0\" && !visited.has(idx * 8 + jdx)) {\n              nextSquares[idx * 8 + jdx] = board[idx][jdx];\n              stack.push([idx, jdx]);\n              visited.add(idx * 8 + jdx);\n            }\n          }\n        }\n      }\n    } else if (board[r][c] !== \"X\") {\n      // if the square isn't a mine, show surrounding tiles\n      nextSquares[i] = board[r][c];\n    } else {\n      nextSquares[i] = \"X\";\n    }\n    setSquares(nextSquares);\n  }\n\n  return (\n    <>\n      {Array.from({ length: 8 }).map((_, rowIdx) => (\n        <div className=\"board-row\" key={rowIdx}>\n          {Array.from({ length: 8 }).map((_, colIdx) => {\n            const idx = rowIdx * 8 + colIdx;\n            return (\n              <Square\n                key={idx}\n                value={squares[idx]}\n                onSquareClicked={() => handleClick(idx)}\n              />\n            );\n          })}\n        </div>\n      ))}\n    </>\n  );\n}\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}