{"ast":null,"code":"var _jsxFileName = \"/Users/kchong/Documents/Uni/year2/Term 2/GUI/GUI-labs/Resources/gui-react-app/src/WordReader.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TextReader({\n  lineNumber\n}) {\n  _s();\n  const [line, setLine] = useState(\"\");\n  useEffect(() => {\n    fetch(\"/sample.txt\") // Replace with your file path\n    .then(response => response.text()).then(data => {\n      const lines = data.split(\"\\n\"); // Split file into lines\n      if (lineNumber >= 1 && lineNumber <= lines.length) {\n        setLine(lines[lineNumber - 1]); // Get the specific line (1-based index)\n      } else {\n        setLine(\"Line not found\");\n      }\n    }).catch(error => console.error(\"Error loading file:\", error));\n  }, [lineNumber]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Line \", lineNumber, \":\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: line\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}\n_s(TextReader, \"TW0/l4r4xHl7EROyE2kKJhi5B8Y=\");\n_c = TextReader;\nexport default TextReader;\nvar _c;\n$RefreshReg$(_c, \"TextReader\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","TextReader","lineNumber","_s","line","setLine","fetch","then","response","text","data","lines","split","length","catch","error","console","children","fileName","_jsxFileName","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kchong/Documents/Uni/year2/Term 2/GUI/GUI-labs/Resources/gui-react-app/src/WordReader.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\nfunction TextReader({ lineNumber }) {\n  const [line, setLine] = useState(\"\");\n\n  useEffect(() => {\n    fetch(\"/sample.txt\") // Replace with your file path\n      .then((response) => response.text())\n      .then((data) => {\n        const lines = data.split(\"\\n\"); // Split file into lines\n        if (lineNumber >= 1 && lineNumber <= lines.length) {\n          setLine(lines[lineNumber - 1]); // Get the specific line (1-based index)\n        } else {\n          setLine(\"Line not found\");\n        }\n      })\n      .catch((error) => console.error(\"Error loading file:\", error));\n  }, [lineNumber]);\n\n  return (\n    <div>\n      <h2>Line {lineNumber}:</h2>\n      <pre>{line}</pre>\n    </div>\n  );\n}\n\nexport default TextReader;\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,SAASC,UAAUA,CAAC;EAAEC;AAAW,CAAC,EAAE;EAAAC,EAAA;EAClC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEpCC,SAAS,CAAC,MAAM;IACdQ,KAAK,CAAC,aAAa,CAAC,CAAC;IAAA,CAClBC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;MACd,MAAMC,KAAK,GAAGD,IAAI,CAACE,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;MAChC,IAAIV,UAAU,IAAI,CAAC,IAAIA,UAAU,IAAIS,KAAK,CAACE,MAAM,EAAE;QACjDR,OAAO,CAACM,KAAK,CAACT,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;MAClC,CAAC,MAAM;QACLG,OAAO,CAAC,gBAAgB,CAAC;MAC3B;IACF,CAAC,CAAC,CACDS,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC,CAAC;EAClE,CAAC,EAAE,CAACb,UAAU,CAAC,CAAC;EAEhB,oBACEF,OAAA;IAAAiB,QAAA,gBACEjB,OAAA;MAAAiB,QAAA,GAAI,OAAK,EAACf,UAAU,EAAC,GAAC;IAAA;MAAAgB,QAAA,EAAAC,YAAA;MAAAjB,UAAA;MAAAkB,YAAA;IAAA,OAAI,CAAC,eAC3BpB,OAAA;MAAAiB,QAAA,EAAMb;IAAI;MAAAc,QAAA,EAAAC,YAAA;MAAAjB,UAAA;MAAAkB,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAF,QAAA,EAAAC,YAAA;IAAAjB,UAAA;IAAAkB,YAAA;EAAA,OACd,CAAC;AAEV;AAACjB,EAAA,CAvBQF,UAAU;AAAAoB,EAAA,GAAVpB,UAAU;AAyBnB,eAAeA,UAAU;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}